import Player from './objects/Player.min.js'
import Cactus from './objects/Cactus.min.js'

// import Levels from './levels.min.js';

import { showScore, resetScore } from './ui/score.min.js'
import { hidePressToPlay, hideGameOver } from './ui/gameState.min.js'

import generateAnimations from './animations/index.min.js'

let bgMain;
let bgSub;
let definedSpeed;
let definedCactusSpawn;
let desiredScore;
let currentLevel;

class Dino extends Phaser.Scene {

    constructor() {
        super('Dino');

        this.state = {
            score: 0,
            highScore: 0,
            started: false,
            UIUpdated: false,
            gameOver: false,
            cactuses: [],
            numberOfStars: 3,
            cactusDistance: 2000,
            timer: {
                speedLoop: 0,
                cactusSpawnLoop: 0
            },
        };
    }


    init(data) {
        definedSpeed = data.speed;
        this.state.speed = definedSpeed;
        definedCactusSpawn = data.cactusSpawn;
        desiredScore = data.desiredScore;
        currentLevel = data.currentLevel;
    }

    // Atlas generated by https://gammafp.github.io/atlas-packer-phaser/editor
    preload() {
        this.load.spritesheet('tiles', './assets/tiles.png', { frameWidth: 16, frameHeight: 16 });
        this.load.atlas('atlas', './assets/atlas.png', './assets/atlas.json');
        this.load.atlas('triplefire', './src/assets/triplefire.png', './src/assets/triplefire.json');
        this.load.atlas('singlefire', './src/assets/singlefire.png', './src/assets/singlefire.json');
        this.load.atlas('charlie', './src/assets/charlie.png', './src/assets/charliejson.json');
        this.load.image("bgmain", "./src/assets/bgmain.png");
        this.load.image("bgsub", "./src/assets/bgsub.png");
        this.load.video("gameover", "./src/assets/GameOver.mp4");

        this.load.on('complete', () => {
            generateAnimations(this);
        });
    }

    create() {
        bgSub = this.add.tileSprite(800, 350, 1700, 1000, "bgsub");

        bgMain = this.add.tileSprite(800, 400, 1700, 1000, "bgmain");

        this.player = new Player(this, 25, 460);

        this.inputs = this.input.keyboard.createCursorKeys();
    }
    
    update(time, delta) {
        this.state.timer.speedLoop += delta;
        this.state.timer.cactusSpawnLoop += delta;

        if (this.inputs.space.isDown && !this.state.started && !this.state.gameOver) {
            this.state.started = true;
            document.getElementById("press-to-play").style.display = "none";
        }

        if (this.state.started) {
            this.player.update(this.inputs, delta);
            
            if (!this.state.UIUpdated) {
                this.updateUI();
            }
            
            if (this.state.timer.cactusSpawnLoop > this.state.cactusDistance) {
                this.state.cactusDistance = Phaser.Math.Between(definedCactusSpawn[0] / this.state.speed, definedCactusSpawn[1] / this.state.speed);
                this.state.cactuses.push(new Cactus(this));
                this.state.timer.cactusSpawnLoop = 0;
            }
 
            if (this.state.timer.speedLoop > 10000) {
                this.state.timer.speedLoop = 0;
                this.state.speed += .25;
            }
            bgMain.tilePositionX += .5;
            bgSub.tilePositionX += .25;
            if(this.state.score === desiredScore) {
                if(parseInt(localStorage.getItem("level")) < currentLevel) {
                    localStorage.setItem("level", currentLevel);
                }
                this.scene.stop();
                alert("You've beat this level!");
                window.location.reload();
            }
        }

        if (this.state.gameOver) {
            this.state.cactuses.forEach(cactus => cactus.stop());
        }

        if (this.inputs.space.isDown && this.state.gameOver) {
            this.restartGame();
        }

    }

    updateUI() {
        hidePressToPlay();
        hideGameOver();

        showScore();

        this.state.UIUpdated = true;
    }

    restartGame() {
        hideGameOver();
        resetScore(this.state);

        this.state.started = true;
        this.state.gameOver = false;
        this.state.speed = definedSpeed;
        this.state.cactuses.forEach(cactus => cactus.sprite.destroy());
        this.state.cactuses = [];

        this.player.isDead = false;
    }
}

export default Dino;